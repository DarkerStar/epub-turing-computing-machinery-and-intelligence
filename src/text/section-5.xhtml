<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
	<meta charset="utf-8"/>
	
	<title>5. Universality of Digital Computers • Computing Machinery and Intelligence</title>
	
	<link rel="stylesheet" href="../style/style.css"/>
</head>
<body epub:type="bodymatter">
<section id="section-5" epub:type="chapter">
<h1 id="universality-of-digital-computers"><span class="section-number">5.</span> Universality of Digital Computers</h1>
<p>
	The digital computers considered in the last section may be classified amongst the ‘discrete state machines’.
	These are the machines which move by sudden jumps or clicks from one quite definite state to another.
	These states are sufficiently different for the possibility of confusion between them to be ignored.
	Strictly speaking there are no such machines.
	Everything really moves continuously.
	But there are many kinds of machine which can profitably be <em>thought</em> of as being discrete state machines.
	For instance in considering the switches for a lighting system it is a convenient fiction that each switch must be definitely on or definitely off.
	There must be intermediate positions, but for most purposes we can forget about them.
	As an example of a discrete state machine we might consider a wheel which clicks<span epub:type="pagebreak" id="page-440" title="440"></span> round through 120° once a second, but may be stopped by a lever which can be operated from outside; in addition a lamp is to light in one of the positions of the wheel.
	This machine could be described abstractly as follows.
	The internal state of the machine (which is described by the position of the wheel) may be <var>q<sub>1</sub></var>, <var>q<sub>2</sub></var> or <var>q<sub>3</sub></var>.
	There is an input signal <var>i<sub>0</sub></var> or <var>i<sub>1</sub></var> (position of lever).
	The internal state at any moment is determined by the last state and input signal according to the table
</p>
<table id="table-state-internal">
	<tbody>
		<tr>
			<th rowspan="2" colspan="2"></th>
			<th id="table-state-internal-last" colspan="3">Last State</th>
		</tr>
		<tr>
			<th id="table-state-internal-last-1"><var>q<sub>1</sub></var></th>
			<th id="table-state-internal-last-2"><var>q<sub>2</sub></var></th>
			<th id="table-state-internal-last-3"><var>q<sub>3</sub></var></th>
		</tr>
		<tr>
			<th id="table-state-internal-input" rowspan="2">Input</th>
			<th id="table-state-internal-input-0"><var>i<sub>0</sub></var></th>
			<td headers="table-state-internal-last table-state-internal-last-1 table-state-internal-input table-state-internal-input-0"><var>q<sub>2</sub></var></td>
			<td headers="table-state-internal-last table-state-internal-last-2 table-state-internal-input table-state-internal-input-0"><var>q<sub>3</sub></var></td>
			<td headers="table-state-internal-last table-state-internal-last-3 table-state-internal-input table-state-internal-input-0"><var>q<sub>1</sub></var></td>
		</tr>
		<tr>
			<th id="table-state-internal-input-1"><var>i<sub>1</sub></var></th>
			<td headers="table-state-internal-last table-state-internal-last-1 table-state-internal-input table-state-internal-input-1"><var>q<sub>1</sub></var></td>
			<td headers="table-state-internal-last table-state-internal-last-2 table-state-internal-input table-state-internal-input-1"><var>q<sub>2</sub></var></td>
			<td headers="table-state-internal-last table-state-internal-last-3 table-state-internal-input table-state-internal-input-1"><var>q<sub>3</sub></var></td>
		</tr>
	</tbody>
</table>
<p class="no-indent">
	The output signals, the only externally visible indication of the internal state (the light) are described by the table
</p>
<table id="table-state-output">
	<tbody>
		<tr>
			<th>State</th>
			<td><var>q<sub>1</sub></var></td>
			<td><var>q<sub>2</sub></var></td>
			<td><var>q<sub>3</sub></var></td>
		</tr>
		<tr>
			<th>Output</th>
			<td><var>o<sub>0</sub></var></td>
			<td><var>o<sub>0</sub></var></td>
			<td><var>o<sub>1</sub></var></td>
		</tr>
	</tbody>
</table>
<p class="no-indent">
	This example is typical of discrete state machines.
	They can be described by such tables provided they have only a finite number of possible states.
</p>
<p>
	It will seem that given the initial state of the machine and the input signals it is always possible to predict all future states.
	This is reminiscent of Laplace’s view that from the complete state of the universe at one moment of time, as described by the positions and velocities of all particles, it should be possible to predict all future states.
	The prediction which we are considering is, however, rather nearer to practicability than that considered by Laplace.
	The system of the ‘universe as a whole’ is such that quite small errors in the initial conditions can have an overwhelming effect at a later time.
	The displacement of a single electron by a billionth of a centimetre at one moment might make the difference between a man being killed by an avalanche a year later, or escaping.
	It is an essential property of the mechanical systems which we have called ‘discrete state machines’ that this phenomenon does not occur.
	Even when we consider the actual physical machines instead of the idealised machines, reasonably accurate knowledge of the state at one moment yields reasonably accurate knowledge any number of steps later.
</p>
<p>
	<span epub:type="pagebreak" id="page-441" title="441"></span>
	As we have mentioned, digital computers fall within the class of discrete state machines.
	But the number of states of which such a machine is capable is usually enormously large.
	For instance, the number for the machine now working at Manchester is about 2<sup>165,000</sup>, <abbr title="that is"><i lang="la" xml:lang="la">i.e.</i></abbr>, about 10<sup>50,000</sup>.
	Compare this with our example of the clicking wheel described above, which had three states.
	It is not difficult to see why the number of states should be so immense.
	The computer includes a store corresponding to the paper used by a human computer.
	It must be possible to write into the store any one of the combinations of symbols which might have been written on the paper.
	For simplicity suppose that only digits from 0 to 9 are used as symbols.
	Variations in handwriting are ignored.
	Suppose the computer is allowed 100 sheets of paper each containing 50 lines each with room for 30 digits.
	Then the number of states is 10<sup>100×50×30</sup>, <abbr title="that is"><i lang="la" xml:lang="la">i.e.</i></abbr> 10<sup> 150,000</sup>.
	This is about the number of states of three Manchester machines put together.
	The logarithm to the base two of the number of states is usually called the ‘storage capacity’ of the machine.
	Thus the Manchester machine has a storage capacity of about 165,000 and the wheel machine of our example about 1.6.
	If two machines are put together their capacities must be added to obtain the capacity of the resultant machine.
	This leads to the possibility of statements such as “The Manchester machine contains 64 magnetic tracks each with a capacity of 2560, eight electronic tubes with a capacity of 1280.
	Miscellaneous storage amounts to about 300 making a total of 174,380.”
</p>
<p>
	Given the table corresponding to a discrete state machine it is possible to predict what it will do.
	There is no reason why this calculation should not be carried out by means of a digital computer.
	Provided it could be carried out sufficiently quickly the digital computer could mimic the behavior of any discrete state machine.
	The imitation game could then be played with the machine in question (as <var>B</var>) and the mimicking digital computer (as <var>A</var>) and the interrogator would be unable to distinguish them.
	Of course the digital computer must have an adequate storage capacity as well as working sufficiently fast.
	Moreover, it must be programmed afresh for each new machine which it is desired to mimic.
</p>
<p>
	This special property of digital computers, that they can mimic any discrete state machine, is described by saying that they are <em>universal</em> machines.
	The existence of machines with this property has the important consequence that, consi&#173;derations of speed apart, it is unnecessary to design various new machines to do various computing processes.
	They can all be<span epub:type="pagebreak" id="page-442" title="442"></span> done with one digital computer, suitably programmed for each case.
	It will be seen that as a consequence of this all digital com&#173;puters are in a sense equivalent.
</p>
<p>
	We may now consider again the point raised at the end of <a href="section-3.xhtml">§3</a>.
	It was suggested tentatively that the question, “Can machines think?” should be replaced by “Are there imaginable digital computers which would do well in the imitation game?”
	If we wish we can make this superficially more general and ask “Are there discrete state machines which would do well?”
	But in view of the universality property we see that either of these questions is equivalent to this, “Let us fix our attention on one particular digital computer <var>C</var>.
	Is it true that by modifying this computer to have an adequate storage, suitably increasing its speed of action, and providing it with an appropriate programme, <var>C</var> can be made to play satisfactorily the part of <var>A</var> in the imitation game, the part of <var>B</var> being taken by a man?”
</p>
</section>
</body>
</html>
